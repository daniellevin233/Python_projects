/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift
* of x, moreover if instruction[5] equals 0 it will return shift right
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;

     PARTS:
     Mul (a=x, b=y, out=mulout);

     ShiftRight (in=y, out=shiftrighty);
     ShiftRight (in=x, out=shiftrightx);
     ShiftLeft (in=y, out=shiftlefty);
     ShiftLeft (in=x, out=shiftleftx);
     Mux4Way16 (a=shiftrighty, b=shiftrightx, c=shiftlefty, d=shiftleftx, sel=instruction[4..5], out=shiftout);

     ALU (x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=aluout, zr=zralu, ng=ngalu);
     ALU (x=mulout, y=false, zx=false, nx=false, zy=true, ny=true, f=false, no=false, zr=zrmul, ng=ngmul);
     ALU (x=shiftout, y=false, zx=false, nx=false, zy=true, ny=true, f=false, no=false, zr=zrshift, ng=ngshift);

     Mux4Way16 (a=mulout, b=shiftout, c=mulout, d=aluout, sel=instruction[7..8], out=out);
     Mux4Way (a=zrmul, b=zrshift, c=zrmul, d=zralu, sel=instruction[7..8], out=zr);
     Mux4Way (a=ngmul, b=ngshift, c=ngmul, d=ngalu, sel=instruction[7..8], out=ng);
}
