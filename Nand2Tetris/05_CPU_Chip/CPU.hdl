// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // RegA
    Mux16 (a=instruction, b=aluout, sel=instruction[15], out=toareg);
    And (a=instruction[15], b=instruction[5], out=cinstdestA);
    Not (in=instruction[15], out=notcinst);
    Or (a=notcinst, b=cinstdestA, out=loadtoA);
    ARegister (in=toareg, load=loadtoA, out[15]=false, out[0..14]=addressM, out=regaout);

    //RegD
    And (a=instruction[15], b=instruction[4], out=loadtoD);
    DRegister (in=aluout, load=loadtoD, out=dreg);

    //ALU
    ALU (x=dreg, y=mora, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=zr, ng=ng);
    Mux16 (a=regaout, b=inM, sel=instruction[12], out=mora);
    And (a=instruction[3], b=instruction[15], out=write);
    And (a=true, b=write, out=writeM);

    // Checks whether need to jump
    Or (a=ng, b=zr, out=zerorneg);
    Not (in=zerorneg, out=pos);
    And (a=instruction[0], b=pos, out=jumpmore);
    And (a=instruction[1], b=zr, out=jumpequals);
    And (a=instruction[2], b=ng, out=jumpless);
    Or (a=jumpmore, b=jumpequals, out=orjump);
    Or (a=jumpless, b=orjump, out=orjump2);
    And (a=orjump2, b=instruction[15], out=orjump3);

    Or (a=orjump3, b=reset, out=notinc);
    Not (in=notinc, out=increment);
    PC (in=regaout, load=orjump3, inc=increment, reset=reset, out[0..14]=pc, out[15]=false);
}
