// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	
	// ALU 
	
    Not (in=zx, out=notzx);
    And16 (a[0]=notzx, a[1]=notzx, a[2]=notzx, a[3]=notzx, a[4]=notzx, a[5]=notzx, a[6]=notzx, a[7]=notzx, a[8]=notzx,
				a[9]=notzx, a[10]=notzx, a[11]=notzx, a[12]=notzx, a[13]=notzx, a[14]=notzx, a[15]=notzx, b=x, out=reszx);
    Not16 (in=reszx, out=notreszx);
    Mux16 (a=reszx, b=notreszx, sel=nx, out=resnx);
    Not (in=zy, out=notzy);
    And16 (a[0]=notzy, a[1]=notzy, a[2]=notzy, a[3]=notzy, a[4]=notzy, a[5]=notzy, a[6]=notzy, a[7]=notzy, a[8]=notzy,
            a[9]=notzy, a[10]=notzy, a[11]=notzy, a[12]=notzy, a[13]=notzy, a[14]=notzy, a[15]=notzy, b=y, out=reszy);
    Not16 (in=reszy, out=notreszy);
    Mux16 (a=reszy, b=notreszy, sel=ny, out=resny);
    And16 (a=resnx, b=resny, out=resand);
    Add16 (a=resnx, b=resny, out=resadd);
    Mux16 (a=resand, b=resadd, sel=f, out=resf);
    Not16 (in=resf, out=notresf);
    Mux16 (a=resf, b=notresf, sel=no, out=aluout, out=out); // hdl doesn't allow using variable named 'out' => create additional variable with another name
	
	// zr
	
	And16 (a=aluout, b[0..15]=true, out[0..7]=aluout07);
	And16 (a=aluout, b[0..15]=true, out[8..15]=aluout815);
	Or8Way (in=aluout07, out=or1);
	Or8Way (in=aluout815, out=or2);
	Or (a=or1, b=or2, out=reszr);
	Not (in=reszr, out=zr);
	
	// ng
	
	And16 (a=aluout, b[0..15]=true, out[15]=ng);
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
