function Screen.init 2
push constant 511
pop static 0
push constant 255
pop static 1
push constant 0
not
pop static 3
push constant 16
call Array.new 1
pop static 2
push constant 1
pop local 1
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push static 2
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.clearScreen 0
push constant 0
call Screen.setColor 1
pop temp 0
push constant 0
push constant 0
push static 0
push static 1
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 3
push constant 0
return
function Screen.powerOfTwoMultiply 1
label WHILE_EXP0
push local 0
push argument 1
lt
not
if-goto WHILE_END0
push argument 0
push argument 0
add
pop argument 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push argument 0
return
function Screen.drawPixel 3
push constant 16384
push argument 1
push constant 5
call Screen.powerOfTwoMultiply 2
add
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push local 0
call Memory.peek 1
pop local 1
push argument 0
push constant 15
and
push static 2
add
pop pointer 1
push that 0
pop local 2
push static 3
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push local 2
not
and
pop local 1
goto IF_END0
label IF_FALSE0
push local 1
push local 2
or
pop local 1
label IF_END0
push local 0
push local 1
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.drawVerticalLine 4
push constant 16384
push argument 1
push constant 5
call Screen.powerOfTwoMultiply 2
add
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push constant 15
and
push static 2
add
pop pointer 1
push that 0
pop local 2
push argument 1
pop local 3
label WHILE_EXP0
push local 3
push argument 2
push constant 1
add
lt
not
if-goto WHILE_END0
push local 0
call Memory.peek 1
pop local 1
push static 3
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push local 2
not
and
pop local 1
goto IF_END0
label IF_FALSE0
push local 1
push local 2
or
pop local 1
label IF_END0
push local 0
push local 1
call Memory.poke 2
pop temp 0
push local 0
push constant 32
add
pop local 0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawHorizontalLine 7
push argument 1
push constant 16
call Math.divide 2
pop local 5
push argument 2
push constant 16
call Math.divide 2
pop local 6
push constant 16384
push argument 0
push constant 5
call Screen.powerOfTwoMultiply 2
add
push local 5
add
pop local 0
push local 6
push local 5
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 2
push argument 1
sub
push constant 15
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push static 3
call Memory.poke 2
pop temp 0
goto IF_END1
label IF_FALSE1
push local 0
call Memory.peek 1
pop local 1
push argument 2
push constant 1
add
push constant 15
and
push static 2
add
pop pointer 1
push that 0
push argument 1
push constant 15
and
push static 2
add
pop pointer 1
push that 0
sub
pop local 2
push static 3
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push local 1
push local 2
or
call Memory.poke 2
pop temp 0
goto IF_END2
label IF_FALSE2
push local 0
push local 1
push local 2
not
and
call Memory.poke 2
pop temp 0
label IF_END2
label IF_END1
push constant 0
return
label IF_FALSE0
push argument 1
push constant 15
and
push static 2
add
pop pointer 1
push that 0
pop local 2
push local 2
push constant 1
eq
not
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 0
call Memory.peek 1
pop local 1
push static 3
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 0
push local 1
push local 2
push constant 1
sub
not
or
call Memory.poke 2
pop temp 0
goto IF_END4
label IF_FALSE4
push local 0
push local 1
push local 2
push constant 1
sub
and
call Memory.poke 2
pop temp 0
label IF_END4
push local 0
push constant 1
add
pop local 0
push argument 1
push constant 16
add
push argument 1
push constant 15
and
sub
pop argument 1
label IF_FALSE3
push argument 2
push argument 1
sub
push constant 1
add
pop local 4
label WHILE_EXP0
push local 4
push constant 15
gt
not
if-goto WHILE_END0
push local 0
push static 3
call Memory.poke 2
pop temp 0
push local 0
push constant 1
add
pop local 0
push local 4
push constant 16
sub
pop local 4
goto WHILE_EXP0
label WHILE_END0
push local 4
push constant 15
and
push static 2
add
pop pointer 1
push that 0
pop local 3
push local 3
push constant 1
eq
not
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 0
call Memory.peek 1
pop local 1
push static 3
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 0
push local 1
push local 3
push constant 1
sub
or
call Memory.poke 2
pop temp 0
goto IF_END6
label IF_FALSE6
push local 0
push local 1
push local 3
push constant 1
sub
not
and
call Memory.poke 2
pop temp 0
label IF_END6
label IF_FALSE5
push constant 0
return
function Screen.drawDownLine 3
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 0
push argument 2
lt
push local 1
push argument 3
lt
and
not
if-goto WHILE_END0
push argument 0
push local 0
add
push argument 1
push local 1
sub
call Screen.drawPixel 2
pop temp 0
push local 2
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
add
pop local 0
push local 2
push argument 3
add
pop local 2
goto IF_END0
label IF_FALSE0
push local 1
push constant 1
add
pop local 1
push local 2
push argument 2
sub
pop local 2
label IF_END0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawUpLine 3
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 0
push argument 2
lt
push local 1
push argument 3
lt
and
not
if-goto WHILE_END0
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
push local 2
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
add
pop local 0
push local 2
push argument 3
add
pop local 2
goto IF_END0
label IF_FALSE0
push local 1
push constant 1
add
pop local 1
push local 2
push argument 2
sub
pop local 2
label IF_END0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawLine 4
push argument 0
push argument 2
call Math.max 2
pop local 0
push argument 0
push argument 2
call Math.min 2
pop local 1
push argument 1
push argument 3
call Math.max 2
pop local 2
push argument 1
push argument 3
call Math.min 2
pop local 3
push local 0
push local 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 3
push local 2
call Screen.drawVerticalLine 3
pop temp 0
goto IF_END0
label IF_FALSE0
push local 2
push local 3
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 2
push local 1
push local 0
call Screen.drawHorizontalLine 3
pop temp 0
goto IF_END1
label IF_FALSE1
push argument 2
push argument 0
gt
push argument 3
push argument 1
gt
and
push argument 2
push argument 0
lt
push argument 3
push argument 1
lt
and
or
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 1
push local 3
push local 0
push local 1
sub
push local 2
push local 3
sub
call Screen.drawUpLine 4
pop temp 0
goto IF_END2
label IF_FALSE2
push local 1
push local 2
push local 0
push local 1
sub
push local 2
push local 3
sub
call Screen.drawDownLine 4
pop temp 0
label IF_END2
label IF_END1
label IF_END0
push constant 0
return
function Screen.drawRectangle 1
push argument 1
pop local 0
label WHILE_EXP0
push local 0
push argument 3
push constant 1
add
lt
not
if-goto WHILE_END0
push local 0
push argument 0
push argument 2
call Screen.drawHorizontalLine 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 4
push argument 2
neg
pop local 0
push argument 2
push argument 2
call Math.multiply 2
pop local 3
label WHILE_EXP0
push local 0
push argument 2
push constant 1
add
lt
not
if-goto WHILE_END0
push argument 1
push local 0
add
pop local 1
push local 3
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop local 2
push local 1
push argument 0
push local 2
sub
push argument 0
push local 2
add
call Screen.drawHorizontalLine 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
