// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
      let ram = 0;
      let heap = 2048;
      let heap[0] = 0;
      let heap[1] = 14335;

      let freeList = heap+2;
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let ram[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var int lastPointer;
      var int nextPointer;
      var int pointer;
      var int block;

      let lastPointer = 0;
      let pointer = freeList;

      while (~(pointer = 2)) {
        if (ram[pointer-1] > (size + 1)) {
          // cutting the block to size
          if (ram[pointer-1] > (size + 2)) {
            let nextPointer = pointer + size + 2;
            let ram[nextPointer-1] = ram[pointer-1] - size;
            let ram[nextPointer-2] = ram[pointer-2];
          }
          else {
            let nextPointer = ram[pointer-2];
          }

          let block = pointer;
          // moving first pointer if first block is allocated
          if (~(lastPointer = 0)) {
            let ram[lastPointer-2] = nextPointer;
          }
          else {
            let freeList = nextPointer;
          }

          // resetting fields
          let ram[pointer-2] = null;
          let ram[pointer-1] = size;
          return block;
        }
        else {
          let lastPointer = pointer;
          let pointer = ram[pointer-2];
        }
      }
      return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var int lastPointer;

      let lastPointer = freeList;
      while (~(ram[lastPointer-2] = 0)) {
        let lastPointer = ram[lastPointer-2];
      }

      let ram[lastPointer-2] = o[-2];
      return;
    }    
}
